<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vue-video-play动态切换视频源</title>
    <url>/2021/12/20/vue-video-play/</url>
    <content><![CDATA[<h3 id="踩了无数个坑，网上很多资源都是没啥用或者互抄的，最后看到一位大佬的博客，才解决的，因此记录一下。附上大佬的博客地址："><a href="#踩了无数个坑，网上很多资源都是没啥用或者互抄的，最后看到一位大佬的博客，才解决的，因此记录一下。附上大佬的博客地址：" class="headerlink" title="踩了无数个坑，网上很多资源都是没啥用或者互抄的，最后看到一位大佬的博客，才解决的，因此记录一下。附上大佬的博客地址："></a>踩了无数个坑，网上很多资源都是没啥用或者互抄的，最后看到一位大佬的博客，才解决的，因此记录一下。附上大佬的博客地址：</h3><p><a href="https://fe.ntnyq.com/plugins/videojs.html#%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener">https://fe.ntnyq.com/plugins/videojs.html#%E4%BA%8B%E4%BB%B6</a></p>
<h2 id="一、在computed中增加player（）"><a href="#一、在computed中增加player（）" class="headerlink" title="一、在computed中增加player（）"></a>一、在computed中增加player（）</h2><h2 id="二、在methods中增加方法，并调用this-player-src-填入地址"><a href="#二、在methods中增加方法，并调用this-player-src-填入地址" class="headerlink" title="二、在methods中增加方法，并调用this.player.src(填入地址)"></a>二、在methods中增加方法，并调用this.player.src(填入地址)</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">vue-video-player</span> <span class="attr">ref</span>=<span class="string">"videoPlayer"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">    player() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.$refs.videoPlayer.player</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    toggle() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> newVideo = <span class="string">'https://video.com/video.mp4'</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.player.src(newVideo)</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>java环境变量</title>
    <url>/2020/04/04/java%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h1 id="linux配置java环境变量"><a href="#linux配置java环境变量" class="headerlink" title="linux配置java环境变量"></a>linux配置java环境变量</h1><h3 id="一、打开"><a href="#一、打开" class="headerlink" title="一、打开"></a>一、打开</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="二、加入↓↓↓"><a href="#二、加入↓↓↓" class="headerlink" title="二、加入↓↓↓"></a>二、加入↓↓↓</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=JDK路径，包括JDK文件夹</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/<span class="variable">$&#123;JAVA_HOME&#125;</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/libss:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<h4 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/java/jdk-14</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/<span class="variable">$&#123;JAVA_HOME&#125;</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/libss:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<h3 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>win10下bat脚本自动启动（超简单，亲测可用）</title>
    <url>/2020/02/07/win-autoboot/</url>
    <content><![CDATA[<h1 id="把bat脚本放入（或者把快捷方式放进去也可以）："><a href="#把bat脚本放入（或者把快捷方式放进去也可以）：" class="headerlink" title="把bat脚本放入（或者把快捷方式放进去也可以）："></a>把bat脚本放入（或者把快捷方式放进去也可以）：</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/07/win-autoboot/a.png" alt="如图"></p>
<h1 id="亲测可用（2020年2月7日）"><a href="#亲测可用（2020年2月7日）" class="headerlink" title="亲测可用（2020年2月7日）"></a>亲测可用（2020年2月7日）</h1>]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>flashlight</title>
    <url>/2020/01/20/flashlight/</url>
    <content><![CDATA[<h2 id="移步↓↓↓"><a href="#移步↓↓↓" class="headerlink" title="移步↓↓↓"></a>移步↓↓↓</h2><h2 id="https-github-com-DCBXZ66-flashlight"><a href="#https-github-com-DCBXZ66-flashlight" class="headerlink" title="https://github.com/DCBXZ66/flashlight"></a><a href="https://github.com/DCBXZ66/flashlight" target="_blank" rel="noopener">https://github.com/DCBXZ66/flashlight</a></h2>]]></content>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派系统安装：无显示器，无网线，无键盘</title>
    <url>/2019/12/16/smpxt/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;树莓派4b到手也一段时间了，很多小伙伴搜安装系统的教程的时候发现需要外接显示器，或许需要外接网线，或许需要外接键盘等等……我等穷学生某得钱买显示器啊，于是捣鼓出了这篇东西↓↓↓</p>
<a id="more"></a>
<h2 id="一、首先下载镜像"><a href="#一、首先下载镜像" class="headerlink" title="一、首先下载镜像"></a>一、首先下载镜像</h2><p><a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">https://www.raspberrypi.org/downloads/raspbian/</a><br>&emsp;&emsp;我们的树莓派是4GB的RAM+64GB的闪迪卡，所以我选择了带desktop的和recommended software的镜像，如果不需要可视化界面可以选择Lite。（或许你又要说了，你不是没显示器吗，为什么还要desktop？因为后面可以用VNC可视化操作……这个自行百度）<br><img src="/2019/12/16/smpxt/1.png" alt="镜像下载"></p>
<h3 id="下载zip包，解压，会得到一个img镜像文件↓↓↓"><a href="#下载zip包，解压，会得到一个img镜像文件↓↓↓" class="headerlink" title="下载zip包，解压，会得到一个img镜像文件↓↓↓"></a>下载zip包，解压，会得到一个img镜像文件↓↓↓</h3><p><img src="/2019/12/16/smpxt/2.png" alt="img镜像"></p>
<h2 id="二、烧写镜像"><a href="#二、烧写镜像" class="headerlink" title="二、烧写镜像"></a>二、烧写镜像</h2><p><a href="https://sourceforge.net/projects/win32diskimager/" target="_blank" rel="noopener">https://sourceforge.net/projects/win32diskimager/</a></p>
<h3 id="1、下载烧写工具，安装，打开……blablabla"><a href="#1、下载烧写工具，安装，打开……blablabla" class="headerlink" title="1、下载烧写工具，安装，打开……blablabla"></a>1、下载烧写工具，安装，打开……blablabla</h3><p><img src="/2019/12/16/smpxt/3.png" alt="下载烧写工具"></p>
<h3 id="2、把内存卡插到电脑上（通过读卡器或者转接套-and-so-on），选择我们刚刚解压得到的img镜像和我们的内存卡分区（我这里是E盘），然后点击“写入”。"><a href="#2、把内存卡插到电脑上（通过读卡器或者转接套-and-so-on），选择我们刚刚解压得到的img镜像和我们的内存卡分区（我这里是E盘），然后点击“写入”。" class="headerlink" title="2、把内存卡插到电脑上（通过读卡器或者转接套 and so on），选择我们刚刚解压得到的img镜像和我们的内存卡分区（我这里是E盘），然后点击“写入”。"></a>2、把内存卡插到电脑上（通过读卡器或者转接套 and so on），选择我们刚刚解压得到的img镜像和我们的内存卡分区（我这里是E盘），然后点击“写入”。</h3><p><img src="/2019/12/16/smpxt/4.png" alt></p>
<h3 id="“YES”，然后等待完成"><a href="#“YES”，然后等待完成" class="headerlink" title="“YES”，然后等待完成"></a>“YES”，然后等待完成</h3><p><img src="/2019/12/16/smpxt/5.png" alt></p>
<h2 id="三、（有显示器的同学已经可以退场了，插上内存卡，接上显示器，启动就完事）开启ssh，现在的树莓派已经默认关闭ssh，需要手动打开："><a href="#三、（有显示器的同学已经可以退场了，插上内存卡，接上显示器，启动就完事）开启ssh，现在的树莓派已经默认关闭ssh，需要手动打开：" class="headerlink" title="三、（有显示器的同学已经可以退场了，插上内存卡，接上显示器，启动就完事）开启ssh，现在的树莓派已经默认关闭ssh，需要手动打开："></a>三、（有显示器的同学已经可以退场了，插上内存卡，接上显示器，启动就完事）开启ssh，现在的树莓派已经默认关闭ssh，需要手动打开：</h2><h3 id="emsp-emsp-1、烧写完成后可以看到有一个boot分区"><a href="#emsp-emsp-1、烧写完成后可以看到有一个boot分区" class="headerlink" title="&emsp;&emsp;1、烧写完成后可以看到有一个boot分区"></a>&emsp;&emsp;1、烧写完成后可以看到有一个boot分区<img src="/2019/12/16/smpxt/6.png" alt></h3><h3 id="emsp-emsp-2、打开，在里面新建一个文件，文件名叫“ssh”，不要双引号，不要后缀（具体操作：可以新建一个txt文件，重命名为ssh，把后缀名都删掉）如图↓↓↓"><a href="#emsp-emsp-2、打开，在里面新建一个文件，文件名叫“ssh”，不要双引号，不要后缀（具体操作：可以新建一个txt文件，重命名为ssh，把后缀名都删掉）如图↓↓↓" class="headerlink" title="&emsp;&emsp;2、打开，在里面新建一个文件，文件名叫“ssh”，不要双引号，不要后缀（具体操作：可以新建一个txt文件，重命名为ssh，把后缀名都删掉）如图↓↓↓"></a>&emsp;&emsp;2、打开，在里面新建一个文件，文件名叫“ssh”，不要双引号，不要后缀（具体操作：可以新建一个txt文件，重命名为ssh，把后缀名都删掉）如图↓↓↓</h3><p><img src="/2019/12/16/smpxt/7.png" alt></p>
<h2 id="四、设置WiFi自动连接"><a href="#四、设置WiFi自动连接" class="headerlink" title="四、设置WiFi自动连接"></a>四、设置WiFi自动连接</h2><h3 id="还是在boot分区，新建一个文件名为wpa-supplicant-conf的文件，打开，写入以下内容"><a href="#还是在boot分区，新建一个文件名为wpa-supplicant-conf的文件，打开，写入以下内容" class="headerlink" title="还是在boot分区，新建一个文件名为wpa_supplicant.conf的文件，打开，写入以下内容"></a>还是在boot分区，新建一个文件名为wpa_supplicant.conf的文件，打开，写入以下内容</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">country=CN</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">    ssid=<span class="string">"你的WiFi名称"</span></span><br><span class="line">    psk=<span class="string">"你的WiFi密码"</span></span><br><span class="line">    priority=1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="上面的的ssid和psk都是要带英文双引号的"><a href="#上面的的ssid和psk都是要带英文双引号的" class="headerlink" title="//上面的的ssid和psk都是要带英文双引号的"></a>//上面的的ssid和psk都是要带英文双引号的</h3><h2 id="五、插上内存卡启动，等几分钟，打开路由器设置页面查看树莓派的ip地址，然后用finnal-shell等ssh连接软件连接就可以了"><a href="#五、插上内存卡启动，等几分钟，打开路由器设置页面查看树莓派的ip地址，然后用finnal-shell等ssh连接软件连接就可以了" class="headerlink" title="五、插上内存卡启动，等几分钟，打开路由器设置页面查看树莓派的ip地址，然后用finnal shell等ssh连接软件连接就可以了"></a>五、插上内存卡启动，等几分钟，打开路由器设置页面查看树莓派的ip地址，然后用finnal shell等ssh连接软件连接就可以了</h2><h2 id="六、码字不易，不点个赞再走吗？"><a href="#六、码字不易，不点个赞再走吗？" class="headerlink" title="六、码字不易，不点个赞再走吗？"></a>六、码字不易，不点个赞再走吗？</h2><p><img src="/2019/12/16/smpxt/head.jpeg" alt></p>
]]></content>
      <tags>
        <tag>raspberry pi</tag>
      </tags>
  </entry>
  <entry>
    <title>写篇文章记录一下HEXO插入图片的过程</title>
    <url>/2019/11/17/photo/</url>
    <content><![CDATA[<p>菜鸟一枚，插入图片的时候走了不少弯路，写篇blog记录一下。<br>第一步：安装插件，在hexo根目录打开Git Bash,执行<br>    npm install hexo-asset-image –save<br>第二步：打开hexo的配置文件<em>config.yml<br>    找到post_asset_folder，把这个选项从false改成true<br>第三步：打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码<br>    （在此感谢Ericam</em> 大神：<a href="https://blog.csdn.net/xjm850552586）" target="_blank" rel="noopener">https://blog.csdn.net/xjm850552586）</a><br>    <a id="more"></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line">var cheerio = require(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in<span class="_">-a</span>-string</span><br><span class="line"><span class="keyword">function</span> getPosition(str, m, i) &#123;</span><br><span class="line">  <span class="built_in">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="keyword">function</span>(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    	var link = data.permalink;</span><br><span class="line">	<span class="keyword">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">	   var beginPos = getPosition(link, <span class="string">'/'</span>, 1) + 1;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   var beginPos = getPosition(link, <span class="string">'/'</span>, 3) + 1;</span><br><span class="line">	// In hexo 3.1.1, the permalink of <span class="string">"about"</span> page is like <span class="string">".../about/index.html"</span>.</span><br><span class="line">	var endPos = link.lastIndexOf(<span class="string">'/'</span>) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(this).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line">			// For windows style path, we replace <span class="string">'\'</span> to <span class="string">'/'</span>.</span><br><span class="line">			var src = $(this).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">			<span class="keyword">if</span>(!/http[s]*.*|\/\/.*/.<span class="built_in">test</span>(src) &amp;&amp;</span><br><span class="line">			   !/^\s*\//.<span class="built_in">test</span>(src)) &#123;</span><br><span class="line">			  // For <span class="string">"about"</span> page, the first part of <span class="string">"src"</span> can<span class="string">'t be removed.</span></span><br><span class="line"><span class="string">			  // In addition, to support multi-level local directory.</span></span><br><span class="line"><span class="string">			  var linkArray = link.split('</span>/<span class="string">').filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">				return elem != '</span><span class="string">';</span></span><br><span class="line"><span class="string">			  &#125;);</span></span><br><span class="line"><span class="string">			  var srcArray = src.split('</span>/<span class="string">').filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">				return elem != '</span><span class="string">' &amp;&amp; elem != '</span>.<span class="string">';</span></span><br><span class="line"><span class="string">			  &#125;);</span></span><br><span class="line"><span class="string">			  if(srcArray.length &gt; 1)</span></span><br><span class="line"><span class="string">				srcArray.shift();</span></span><br><span class="line"><span class="string">			  src = srcArray.join('</span>/<span class="string">');</span></span><br><span class="line"><span class="string">			  $(this).attr('</span>src<span class="string">', config.root + link + src);</span></span><br><span class="line"><span class="string">			  console.info&amp;&amp;console.info("update link as:--&gt;"+config.root + link + src);</span></span><br><span class="line"><span class="string">			&#125;</span></span><br><span class="line"><span class="string">		&#125;else&#123;</span></span><br><span class="line"><span class="string">			console.info&amp;&amp;console.info("no src attr, skipped...");</span></span><br><span class="line"><span class="string">			console.info&amp;&amp;console.info($(this));</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">      data[key] = $.html();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure>
<p>第四步：现在就可以插入图片了，比如hexo new post photo之后<br>就在source/_posts生成photo.md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内，<br>在photo.md文件里面按markdown的标准写,（我的文件名是head.jpeg）比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![这是代替图片的文字，随便写](head.jpeg)</span><br></pre></td></tr></table></figure>
<p><img src="/2019/11/17/photo/head.jpeg" alt="这是代替图片的文字，随便写"><br>然后就……完事了。<br>参考链接：<br><a href="https://blog.csdn.net/xjm850552586/article/details/84101345" target="_blank" rel="noopener">https://blog.csdn.net/xjm850552586/article/details/84101345</a><br><a href="https://blog.csdn.net/qq_38148394/article/details/79997971" target="_blank" rel="noopener">https://blog.csdn.net/qq_38148394/article/details/79997971</a></p>
]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
